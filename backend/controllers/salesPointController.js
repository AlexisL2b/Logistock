import salesPointService from "../services/salesPointService.js"

const salesPointController = {
  // üîπ R√©cup√©rer tous les points de vente
  async getAll(req, res) {
    try {
      const salesPoints = await salesPointService.getAllSalesPoints()
      res.json(salesPoints)
    } catch (error) {
      res
        .status(500)
        .json({ message: "Erreur lors de la r√©cup√©ration des points de vente" })
    }
  },

  // üîπ R√©cup√©rer un point de vente par ID
  async getById(req, res) {
    try {
      const salesPoint = await salesPointService.getSalesPointById(
        req.params.id
      )
      res.json({
        message: "Point de vente r√©cup√©r√© avec succ√®s",
        data: salesPoint,
      })
    } catch (error) {
      res.status(404).json({ message: error.message })
    }
  },

  // üîπ Ajouter un nouveau point de vente
  async create(req, res) {
    try {
      const newSalesPoint = await salesPointService.addSalesPoint(req.body)
      res.status(201).json({
        message: "Point de vente ajout√© avec succ√®s",
        data: newSalesPoint,
      })
    } catch (error) {
      res.status(400).json({ message: error.message })
    }
  },

  // üîπ Mettre √† jour un point de vente
  async update(req, res) {
    try {
      const updatedSalesPoint = await salesPointService.updateSalesPoint(
        req.params.id,
        req.body
      )
      res.json({
        message: "Point de vente mis √† jour avec succ√®s",
        data: updatedSalesPoint,
      })
    } catch (error) {
      res.status(404).json({ message: error.message })
    }
  },

  // üîπ Supprimer un point de vente
  async remove(req, res) {
    try {
      const deletedSalesPoint = await salesPointService.deleteSalesPoint(
        req.params.id
      )
      res.json({
        message: "Point de vente supprim√© avec succ√®s",
        data: deletedSalesPoint,
      })
    } catch (error) {
      res.status(400).json({ message: error.message })
    }
  },

  // üîπ R√©cup√©rer les points de vente sans utilisateur
  async getWithoutUsers(req, res) {
    try {
      const salesPoints = await salesPointService.getSalesPointsWithoutUsers()
      res.json({
        message: "Points de vente sans utilisateur r√©cup√©r√©s avec succ√®s",
        data: salesPoints,
      })
    } catch (error) {
      res.status(500).json({
        message:
          "Erreur lors de la r√©cup√©ration des points de vente sans utilisateur",
      })
    }
  },
}

export default salesPointController
